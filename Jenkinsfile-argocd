pipeline {
    agent any

    environment {
        DOCKER_USER = 'quocviet10011'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        SERVICES = "spring-petclinic-customers-service,spring-petclinic-vets-service,spring-petclinic-visits-service,spring-petclinic-genai-service"
        DEPLOY_REPO = 'https://github.com/Vind1Viet/argo-cd.git'   // repo chứa Helm chart
        DEPLOY_REPO_DIR = 'argo-cd'   // thư mục clone ra
        GIT_CREDENTIALS_ID = 'github-token'  // Jenkins secret ID cho GitHub Personal Access Token
    }

    options {
        skipDefaultCheckout(true)
    }

    triggers {
        githubPush()
    }

    stages {
        stage('Checkout Source') {
            steps {
                script {
                    checkout scm

                    sh 'git fetch --tags'

                    env.GIT_COMMIT_ID = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()

                    // Kiểm tra nếu build từ TAG hay từ branch
                    env.GIT_TAG = sh(script: "git describe --tags --exact-match || echo ''", returnStdout: true).trim()

                    if (env.GIT_TAG) {
                        echo "Building from TAG: ${env.GIT_TAG}"
                        env.IMAGE_TAG = env.GIT_TAG
                    } else {
                        echo "Building from branch: using 'latest' tag"
                        env.IMAGE_TAG = "latest"
                    }
                }
            }
        }

        stage('Detect Changed Services') {
            steps {
                script {
                    def servicesList = env.SERVICES.split(',')
                    def changedFiles = sh(returnStdout: true, script: "git diff-tree --no-commit-id --name-only -r ${env.GIT_COMMIT_ID}").trim()

                    def servicesToBuild = servicesList.findAll { service ->
                        changedFiles.split('\n').any { it.startsWith("${service}/") }
                    }

                    if (env.GIT_TAG){
                        env.SERVICES_TO_BUILD = servicesList.join(',')
                        echo "Building all services for tag: ${env.SERVICES_TO_BUILD}"
                    }
                    else if (servicesToBuild.isEmpty() && !env.GIT_TAG) {
                        echo "No changes in any services. Skipping build."
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                    else {  
                        env.SERVICES_TO_BUILD = servicesToBuild.join(',')
                        echo "Services to build: ${env.SERVICES_TO_BUILD}"
                    }
                }
            }
        }

        stage('Build and Push Docker Images') {
            steps {
                script {
                    if (!env.SERVICES_TO_BUILD) {
                        echo "No services to build. Skipping Docker build stage."
                        return
                    }

                    def servicesToBuild = env.SERVICES_TO_BUILD.split(',')

                    docker.withRegistry('', DOCKER_CREDENTIALS_ID) {
                        servicesToBuild.each { service ->
                            echo "Building and pushing Docker image for ${service}"
                            dir(service) {
                                sh '../mvnw clean install -P buildDocker'
                            }

                            def oldImage = "springcommunity/${service}:latest"
                            def newImage = "${DOCKER_USER}/${service}:${IMAGE_TAG}"

                            sh "docker tag ${oldImage} ${newImage}"
                            try {
                                sh "docker push ${newImage}"
                            } catch (e) {
                                echo "Failed to push image ${newImage}: ${e}"
                                throw e
                            }
                        }
                    }
                }
            }
        }

        stage('Update Chart.yaml and values.yaml and Push to GitOps Repo') {
            when {
                expression { return env.GIT_TAG != '' || env.IMAGE_TAG == 'latest' }
            }
            steps {
                script {
                    echo "Cloning GitOps repo and updating Chart.yaml and values.yaml"

                    withCredentials([string(credentialsId: "${GIT_CREDENTIALS_ID}", variable: 'GIT_TOKEN')]) {
                        sh """
                            rm -rf ${DEPLOY_REPO_DIR}
                            git clone https://${GIT_TOKEN}@github.com/Vind1Viet/argo-cd.git ${DEPLOY_REPO_DIR}
                        """

                        dir("${DEPLOY_REPO_DIR}") {
                            script {
                                def targetEnv = (env.GIT_TAG) ? "staging" : "dev"
                                def deployTime = sh(script: "date '+%Y-%m-%d %H:%M:%S'", returnStdout: true).trim()

                                sh """
                                    # Update Chart.yaml
                                    sed -i "s|^description:.*|description: Deployed at ${deployTime}|" ${targetEnv}/Chart.yaml

                                    # Update values.yaml
                                    ${env.SERVICES_TO_BUILD.split(',').collect { service ->
                                        return """
                                            sed -i "s|^${service}:.*|${service}: {tag: \\\"${IMAGE_TAG}\\\"}|" ${targetEnv}/values.yaml
                                        """
                                    }.join('\n')}
                                    
                                    git config user.email "vindiviet@gmail.com"
                                    git config user.name "Vind1Viet"
                                    git add ${targetEnv}/Chart.yaml ${targetEnv}/values.yaml
                                    git commit -m "Update ${targetEnv}: ${deployTime}"
                                    git push origin main
                                """
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'Build failed!'
        }
        success {
            echo 'Build and push completed successfully. GitOps repo updated.'
        }
    }
}
